# Generated by Django 5.2.7 on 2025-10-10 13:26

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProblemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='fas fa-question-circle', max_length=50)),
                ('color', models.CharField(default='#28a745', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Problem Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExpertProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expert_type', models.CharField(choices=[('agronomist', 'Agronomist'), ('agricultural_scientist', 'Agricultural Scientist'), ('extension_officer', 'Extension Officer'), ('researcher', 'Researcher'), ('veterinarian', 'Veterinarian'), ('soil_scientist', 'Soil Scientist'), ('experienced_farmer', 'Experienced Farmer'), ('other', 'Other Expert')], max_length=50)),
                ('qualification', models.CharField(max_length=200)),
                ('institution', models.CharField(blank=True, max_length=200)),
                ('years_of_experience', models.IntegerField(default=0)),
                ('specialization', models.CharField(blank=True, max_length=200)),
                ('bio', models.TextField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_document_url', models.URLField(blank=True, max_length=500)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('solutions_count', models.IntegerField(default=0)),
                ('accepted_solutions_count', models.IntegerField(default=0)),
                ('reputation_score', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='farming_expert_profile', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_experts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-reputation_score', '-verified_at'],
            },
        ),
        migrations.CreateModel(
            name='FarmerProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('slug', models.SlugField(blank=True, max_length=350, unique=True)),
                ('description', models.TextField()),
                ('location', models.CharField(blank=True, help_text='Farm location or village', max_length=200)),
                ('crop_type', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('solved', 'Solved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('views_count', models.IntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('solved_at', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farmer_problems', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='problems', to='farmer_problems.problemcategory')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProblemImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField(help_text='Supabase storage URL', max_length=500)),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(default=0)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='farmer_problems.farmerproblem')),
            ],
            options={
                'ordering': ['order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_expert', models.BooleanField(default=False)),
                ('expert_badge', models.CharField(blank=True, help_text='e.g., Agricultural Expert, PhD', max_length=100)),
                ('is_accepted', models.BooleanField(default=False)),
                ('is_helpful', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solutions', to=settings.AUTH_USER_MODEL)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solutions', to='farmer_problems.farmerproblem')),
            ],
            options={
                'ordering': ['-is_accepted', '-is_helpful', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_type', models.CharField(choices=[('problem', 'Problem Comment'), ('solution', 'Solution Comment')], max_length=20)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='farmer_problems.comment')),
                ('problem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='farmer_problems.farmerproblem')),
                ('solution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='farmer_problems.solution')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='SolutionImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField(help_text='Supabase storage URL', max_length=500)),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.IntegerField(default=0)),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='farmer_problems.solution')),
            ],
            options={
                'ordering': ['order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problems', models.ManyToManyField(blank=True, related_name='tags', to='farmer_problems.farmerproblem')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('problem', 'Problem'), ('solution', 'Solution')], max_length=20)),
                ('vote_type', models.CharField(choices=[('up', 'Upvote'), ('down', 'Downvote')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('problem', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='farmer_problems.farmerproblem')),
                ('solution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='farmer_problems.solution')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='farmerproblem',
            index=models.Index(fields=['-created_at'], name='farmer_prob_created_b8d35d_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerproblem',
            index=models.Index(fields=['status'], name='farmer_prob_status_7ff1f9_idx'),
        ),
        migrations.AddIndex(
            model_name='farmerproblem',
            index=models.Index(fields=['category'], name='farmer_prob_categor_54a534_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vote',
            unique_together={('user', 'problem'), ('user', 'solution')},
        ),
    ]
