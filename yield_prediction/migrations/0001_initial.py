# Generated by Django 5.2.5 on 2025-10-21 14:59

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CropType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=200)),
                ('category', models.CharField(choices=[('cereal', 'Cereal'), ('pulse', 'Pulse'), ('oilseed', 'Oilseed'), ('vegetable', 'Vegetable'), ('fruit', 'Fruit'), ('spice', 'Spice'), ('fiber', 'Fiber'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('base_yield_min', models.FloatField(help_text='Minimum expected yield (quintals/hectare)')),
                ('base_yield_max', models.FloatField(help_text='Maximum expected yield (quintals/hectare)')),
                ('average_yield', models.FloatField(help_text='Average expected yield (quintals/hectare)')),
                ('growing_season', models.CharField(choices=[('kharif', 'Kharif (Monsoon)'), ('rabi', 'Rabi (Winter)'), ('zaid', 'Zaid (Summer)'), ('year_round', 'Year Round')], max_length=50)),
                ('maturity_days', models.PositiveIntegerField(help_text='Days to maturity')),
                ('water_requirement', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20)),
                ('preferred_soil_types', models.CharField(blank=True, help_text='Comma-separated soil types', max_length=200)),
                ('ph_range_min', models.FloatField(default=6.0)),
                ('ph_range_max', models.FloatField(default=7.5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Crop Type',
                'verbose_name_plural': 'Crop Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SoilType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('fertility_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20)),
                ('water_retention', models.CharField(choices=[('poor', 'Poor'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=20)),
                ('drainage', models.CharField(choices=[('poor', 'Poor'), ('good', 'Good'), ('excellent', 'Excellent')], max_length=20)),
                ('yield_multiplier', models.FloatField(default=1.0, help_text='Multiplier for yield calculation')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Soil Type',
                'verbose_name_plural': 'Soil Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='YieldPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_hectares', models.FloatField(help_text='Area in hectares', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('season', models.CharField(choices=[('kharif', 'Kharif (Monsoon)'), ('rabi', 'Rabi (Winter)'), ('zaid', 'Zaid (Summer)'), ('year_round', 'Year Round')], max_length=20)),
                ('irrigation_type', models.CharField(choices=[('rainfed', 'Rainfed'), ('irrigated', 'Irrigated'), ('drip', 'Drip Irrigation'), ('sprinkler', 'Sprinkler Irrigation')], max_length=20)),
                ('fertilizer_type', models.CharField(choices=[('organic', 'Organic'), ('chemical', 'Chemical'), ('mixed', 'Mixed (Organic + Chemical)'), ('none', 'No Fertilizer')], max_length=20)),
                ('predicted_yield_min', models.FloatField(help_text='Minimum predicted yield (quintals)')),
                ('predicted_yield_max', models.FloatField(help_text='Maximum predicted yield (quintals)')),
                ('predicted_yield_avg', models.FloatField(help_text='Average predicted yield (quintals)')),
                ('confidence_level', models.CharField(choices=[('low', 'Low (60-70%)'), ('medium', 'Medium (70-80%)'), ('high', 'High (80-90%)'), ('very_high', 'Very High (90%+)')], max_length=20)),
                ('weather_condition', models.CharField(blank=True, help_text='Expected weather conditions', max_length=50)),
                ('pest_disease_risk', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or recommendations')),
                ('recommendations', models.TextField(blank=True, help_text='System-generated recommendations')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crop_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yield_prediction.croptype')),
                ('soil_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yield_prediction.soiltype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='yield_predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Yield Prediction',
                'verbose_name_plural': 'Yield Predictions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='YieldHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actual_yield', models.FloatField(help_text='Actual yield achieved (quintals)')),
                ('harvest_date', models.DateField()),
                ('weather_conditions', models.CharField(blank=True, max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prediction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='yield_prediction.yieldprediction')),
            ],
            options={
                'verbose_name': 'Yield History',
                'verbose_name_plural': 'Yield Histories',
                'ordering': ['-harvest_date'],
            },
        ),
        migrations.CreateModel(
            name='CropRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season', models.CharField(choices=[('kharif', 'Kharif (Monsoon)'), ('rabi', 'Rabi (Winter)'), ('zaid', 'Zaid (Summer)'), ('year_round', 'Year Round')], max_length=20)),
                ('description', models.TextField(help_text='Why these crops are recommended')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommended_crops', models.ManyToManyField(help_text='Crops suitable for this soil and season', to='yield_prediction.croptype')),
                ('soil_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='yield_prediction.soiltype')),
            ],
            options={
                'verbose_name': 'Crop Recommendation',
                'verbose_name_plural': 'Crop Recommendations',
                'ordering': ['soil_type', 'season'],
                'unique_together': {('soil_type', 'season')},
            },
        ),
    ]
